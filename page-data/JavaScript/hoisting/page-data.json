{"componentChunkName":"component---src-templates-blog-post-js","path":"/JavaScript/hoisting/","result":{"data":{"site":{"siteMetadata":{"title":"caferion","author":"caferion","siteUrl":"https://caferion.github.io","comment":{"disqusShortName":"","utterances":"caferion/blog-comments"},"sponsor":{"buyMeACoffeeId":"caferion"}}},"markdownRemark":{"id":"365ca837-4e80-5f7f-b229-3c42aa92542f","excerpt":"자바스크립트를 하다 보면 한 번쯤은 호이스팅이라는 말을 들어봤을거다. 그럼 호이스팅은 뭘까? 1. 호이스팅이란? 먼저 MDN을 확인해보자. 호이스팅(hoisting)은 ECMAScript® 2015 언어 명세 및 그 이전 표준 명세에서 사용된 적이 없는 용어입니다. 호이스팅은 JavaScript…","html":"<p>자바스크립트를 하다 보면 한 번쯤은 호이스팅이라는 말을 들어봤을거다.</p>\n<p>그럼 호이스팅은 뭘까?</p>\n<h2 id=\"1-호이스팅이란\" style=\"position:relative;\"><a href=\"#1-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85%EC%9D%B4%EB%9E%80\" aria-label=\"1 호이스팅이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 호이스팅이란?</h2>\n<p>먼저 MDN을 확인해보자.</p>\n<blockquote>\n<p>호이스팅(hoisting)은 ECMAScript® 2015 언어 명세 및 그 이전 표준 명세에서 사용된 적이 없는 용어입니다. <strong>호이스팅은 JavaScript에서 실행 콘텍스트(특히 생성 및 실행 단계)가 어떻게 동작하는가에 대한 일반적인 생각</strong>으로 여겨집니다. 하지만 호이스팅은 오해로 이어질 수 있습니다.</p>\n<p>예를 들어, 호이스팅을 변수 및 함수 선언이 물리적으로 작성한 코드의 상단으로 옮겨지는 것으로 가르치지만, 실제로는 그렇지 않습니다. <strong>변수 및 함수 선언은 컴파일 단계에서 메모리에 저장되지만, 코드에서 입력한 위치와 정확히 일치한 곳에 있습니다.</strong></p>\n</blockquote>\n<p>호이스팅은</p>\n<ol>\n<li>자바스크립트 실행컨텍스트 동작을 이해하기 위해 생긴 개념</li>\n<li>변수 및 함수 선언은 컴파일 단계에서 메모리에 저장하면서 상단에 옮겨지는 것처럼 보이지만 실제로는 코드에 입력한 위치에 존재한다</li>\n</ol>\n<p>위와 같이 정리할 수 있지만, 우리가 동작을 이해하는 데는 변수 선언과 함수 선언은 상단으로 끌어올리는 것으로 이해하면 좋을 거 같다.</p>\n<p>그럼 호이스팅이 무엇인지 코드로 확인해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undifined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function b() { console.log('함수입니다') }</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수입니다</span>\n\n<span class=\"token keyword\">var</span> a\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수입니다'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>변수랑 함수가 선언되기 전에 호출을 했는데 에러가 발생하지 않는 걸 확인할 수 있다. 타 언어를 한 사람들에게 너무 이상하겠지만 이것이 자바스크립트에서 말하는 호이스팅이다.</p>\n<p>그럼 왜 에러가 나지 않은 걸까?</p>\n<p>위 코드를 우리가 이해하기 쉬운 코드로 작성하면 아래와 같다. (MDN에서도 적혀 있듯이 실제로 이렇게 동작하는 것은 아니다. 이해를 돕기 위한 코드로 봐주면 될 거 같다)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> a <span class=\"token comment\">// 자바스크립트 var 변수는 선언과 동시 undefined 값으로 초기화한다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'함수입니다'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undifined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function b() { console.log('함수입니다') }</span>\n<span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수입니다console.log(</span></code></pre></div>\n<p>위와 같이 변수 선언과 함수 선언은 제일 위로 끌어 올려지게 되어 에러가 나지 않는다.</p>\n<h2 id=\"2-호이스팅-test\" style=\"position:relative;\"><a href=\"#2-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-test\" aria-label=\"2 호이스팅 test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 호이스팅 TEST</h2>\n<p>호이스팅의 개념을 이해했다면 몇 가지 상황을 통해 한 번 더 점검해보자.</p>\n<p>아래 코드를 실행하면 어떤 값을 출력 되게 될까?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\nsum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> sum\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 정답은 아래에</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\nsum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token keyword\">var</span> sum\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p>위 상황은 호이스팅을 이해하지 못해 많이 착각할 수 있는 예제이다. 호이스팅을 제대로 이해하지 못했다면 마지막 값이 <code class=\"language-text\">undefined</code>라고 생각했을 수 있다. 왜 <code class=\"language-text\">10</code>이 출력 된 걸까?</p>\n<p>우리가 이해하기 쉬운 코드로 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> sum <span class=\"token comment\">// undefined로 초기화  호이스팅 동작</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\nsum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token comment\">// var sum;     &lt;---- 해당 부분이 호이스팅 돼서 사라짐</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">var sum</code>이 호이스팅 되어 위로 올라가면서 마지막 sum이 10이 출력되는 것을 확인할 수 있다.</p>\n<p>아래 코드는 어떤 결과가 나올까?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\nsum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> sum\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 정답은 아래에</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\nsum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n<span class=\"token keyword\">var</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p><code class=\"language-text\">var sum;</code>을 <code class=\"language-text\">var sum = 0;</code>으로 변경해보니 마지막 sum 값이 <code class=\"language-text\">0</code>으로 출력 되는 것을 확인할 수 있다.</p>\n<p>위 코드도 이해하기 쉬운 코드로 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> sum <span class=\"token comment\">// undefined로 초기화  호이스팅 동작</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span>\nsum <span class=\"token operator\">+=</span> <span class=\"token number\">5</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\nsum <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 변수에 0값을 할당</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>위와 같이 <code class=\"language-text\">var sum = 0;</code> 전체가 호이스팅 되는 것이 아니라 <code class=\"language-text\">var sum;</code> 선언 부분만 호이스팅 되기 때문에 마지막 결과 값은 <code class=\"language-text\">0</code>이 나오는 것을 알 수가 있다.</p>\n<p>마지막으로 변수 선언과 함수 선언 중 어떤 게 먼저 선언될까? 다음 코드를 확인해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> a\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 정답은 아래에</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function a() {}</span>\n<span class=\"token keyword\">var</span> a\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function a() {}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function a() {}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function b() {}</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p>위 코드를 통해 변수 선언이 함수 선언보다 더 위에 호이스팅이 되었다는 것을 확인해 볼 수 있다.</p>\n<p>위 코드도 이해하기 쉬운 코드로 작성해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// a파트</span>\n<span class=\"token keyword\">var</span> a <span class=\"token comment\">// undefined로 초기화  호이스팅 동작</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 함수 호이스팅 동작</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function a() {}</span>\n<span class=\"token comment\">// var a;    &lt;---- 해당 부분이 호이스팅 돼서 사라짐</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function a() {}</span>\n<span class=\"token comment\">// function a() {}  &lt;---- 해당 부분이 호이스팅 돼서 사라짐</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function a() {}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// b파트</span>\n<span class=\"token keyword\">var</span> b <span class=\"token comment\">// undefined로 초기화  호이스팅 동작</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 함수 호이스팅 동작</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// function b() {}</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// b변수에 0값을 할당</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n<span class=\"token comment\">// function b() {}  &lt;---- 해당 부분이 호이스팅 돼서 사라짐</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<h2 id=\"3-호이스팅-심화\" style=\"position:relative;\"><a href=\"#3-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85-%EC%8B%AC%ED%99%94\" aria-label=\"3 호이스팅 심화 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 호이스팅 심화</h2>\n<p>호이스팅은 실제 자바스크립트 동작에서 실행컨텍스트를 생성시 변수와 함수를 메모리에 매핑하는 과정을 말한다. 고로 ES6 이후에 등장한 let, const라는 변수 선언에서도 호이스팅은 발생한다.</p>\n<p>var 변수는 매핑시 undefined라는 값을 초기화 해주기 때문에 선언전에 사용을 해도 에러가 발생하지 않는다.</p>\n<p>함수는 메모리에 매핑 되었기 때문에 선언전에 사용해도 에러가 발생하지 않는다.</p>\n<p>let, const는 매핑시 초기화를 해주지 않기에 ‘초기화전에는 접근 할 수 없다’는 에러가 발생한다.</p>\n<ul>\n<li>ES6이전에는 VO(Variable Object)라는 곳에 저장</li>\n<li>ES6이후로는 var는 VE(Variable Environment)라는 곳에 저장 let, const, 함수는 LE(Lexical Environment)라는 곳에 저장</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<ol>\n<li>호이스팅은 변수 선언과 함수 선언을 상단으로 끌어올리는 것을 말한다.(실행컨텍스트 생성시 변수와 함수를 메모리에 매핑하는 과정)</li>\n<li>실제 동작은 변수 및 함수 선언은 컴파일 단계에서 메모리에 저장되지만, 코드에서 입력한 위치와 정확히 일치한 곳에 있다.</li>\n<li>변수 선언이 함수 선언보다 더 위로 호이스팅 된다.</li>\n<li>let, const 도 호이스팅 된다. 하지만 변수 선언 이전에 실행시 에러가 발생한다.</li>\n</ol>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Glossary/Hoisting\">MDN - Hoisting</a></p>","frontmatter":{"title":"호이스팅(Hoisting)의 이해","date":"September 14, 2020"}}},"pageContext":{"slug":"/JavaScript/hoisting/","previous":null,"next":{"fields":{"slug":"/JavaScript/variable/"},"frontmatter":{"title":"let, const 그리고 var (자바스크립트 변수 선언)","category":"javascript","draft":false}}}},"staticQueryHashes":["3128451518","52803243"]}