{"componentChunkName":"component---src-templates-blog-post-js","path":"/typescript/interface-typealiases/","result":{"data":{"site":{"siteMetadata":{"title":"caferion","author":"caferion","siteUrl":"https://caferion.github.io","comment":{"disqusShortName":"","utterances":"caferion/blog-comments"},"sponsor":{"buyMeACoffeeId":"caferion"}}},"markdownRemark":{"id":"3369fe80-6d1d-5435-914c-76182f5394e6","excerpt":"1) Type Alias  방식으로 타입을 새로 별칭으로 만들 수 있다. 2) Extends  키워드를 이용하여 interface를 확장 할 수 있다.(class와 비슷) 3) Call & Construct Signature 함수 호출과 return값을 interface 와 type을 이용하여 정해줄수있다. (Call Signature) interface 의 경우 (파라미터1: 타입, 파라미터2: 타입 …): 리턴타입 형태로 선언 type의 경우 (파라미터1: 타입, 파라미터…","html":"<h3 id=\"1-type-alias\" style=\"position:relative;\"><a href=\"#1-type-alias\" aria-label=\"1 type alias permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Type Alias</h3>\n<ul>\n<li><code class=\"language-text\">type 명칭</code> 방식으로 타입을 새로 별칭으로 만들 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasPhoneNumber</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasEmail</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * (1) Type aliases allow us to give a type a name\n */</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringOrNumber</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span>\n\n<span class=\"token comment\">// this is the ONLY time you'll see a type on the RHS of assignment</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">HasName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// NEW in TS 3.7: Self-referencing types!</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NumVal</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> NumVal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"2-extends\" style=\"position:relative;\"><a href=\"#2-extends\" aria-label=\"2 extends permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Extends</h3>\n<ul>\n<li><code class=\"language-text\">extends</code> 키워드를 이용하여 interface를 확장 할 수 있다.(class와 비슷)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// == INTERFACE == //</span>\n<span class=\"token comment\">/**\n * (2) Interfaces can extend from other interfaces\n */</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasInternationalPhoneNumber</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HasPhoneNumber</span> <span class=\"token punctuation\">{</span>\n  countryCode<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"3-call--construct-signature\" style=\"position:relative;\"><a href=\"#3-call--construct-signature\" aria-label=\"3 call  construct signature permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Call &#x26; Construct Signature</h3>\n<ul>\n<li>함수 호출과 return값을 interface 와 type을 이용하여 정해줄수있다. (Call Signature)</li>\n<li>interface 의 경우 (파라미터1: 타입, 파라미터2: 타입 …): 리턴타입 형태로 선언</li>\n<li>type의 경우 (파라미터1: 타입, 파라미터2: 타입 …) ⇒ 리턴타입 형태로 선언</li>\n<li><code class=\"language-text\">new</code> 를 앞에 붙여주면 new 생성자로 리턴을 받을 수 있습니다. (Construct Signature)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * (3) they can also be used to describe call signatures\n */</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContactMessenger1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span>contact<span class=\"token operator\">:</span> HasEmail <span class=\"token operator\">|</span> HasPhoneNumber<span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ContactMessenger2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">contact<span class=\"token operator\">:</span> HasEmail <span class=\"token operator\">|</span> HasPhoneNumber<span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> string</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n\n<span class=\"token comment\">// NOTE: we don't need type annotations for contact or message</span>\n<span class=\"token keyword\">const</span> emailer<span class=\"token operator\">:</span> <span class=\"token function-variable function\">ContactMessenger1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_contact<span class=\"token punctuation\">,</span> _message</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/** ... */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/**\n * (4) construct signatures can be described as well\n */</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ContactConstructor</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> HasEmail <span class=\"token operator\">|</span> HasPhoneNumber\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-dictionary-object--index-signatures\" style=\"position:relative;\"><a href=\"#4-dictionary-object--index-signatures\" aria-label=\"4 dictionary object  index signatures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) Dictionary Object &#x26; Index Signatures</h3>\n<ul>\n<li>객체 키값에 상관없이, value에 형태를 지정해 주고 싶을시 아래와 같이 할 수 있다.</li>\n<li>객체 배열 형태를 지정해줄시 유용할거 같다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/**\n * (5) index signatures describe how a type will respond to property access\n */</span>\n\n<span class=\"token comment\">/**\n * @example\n * {\n *    iPhone: { areaCode: 123, num: 4567890 },\n *    home:   { areaCode: 123, num: 8904567 },\n * }\n */</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">PhoneNumberDict</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// arr[0],  foo['myProp']</span>\n  <span class=\"token punctuation\">[</span>numberName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n        areaCode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n        num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> phoneDict<span class=\"token operator\">:</span> PhoneNumberDict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  office<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> areaCode<span class=\"token operator\">:</span> <span class=\"token number\">321</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">:</span> <span class=\"token number\">5551212</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> areaCode<span class=\"token operator\">:</span> <span class=\"token number\">321</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">:</span> <span class=\"token number\">5550010</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// try editing me</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// at most, a type may have one string and one number index signature</span></code></pre></div>\n<h3 id=\"5-combinding-interfaces\" style=\"position:relative;\"><a href=\"#5-combinding-interfaces\" aria-label=\"5 combinding interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) Combinding Interfaces</h3>\n<ul>\n<li>똑같은 이름의 인터페이스를 선언하면 인터페이스가 머지 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">phonenumberdict</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// arr[0],  foo['myprop']</span>\n  <span class=\"token punctuation\">[</span>numbername<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>\n    <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n        areacode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n        num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n      <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> phonedict<span class=\"token operator\">:</span> phonenumberdict <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  office<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> areacode<span class=\"token operator\">:</span> <span class=\"token number\">321</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">:</span> <span class=\"token number\">5551212</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> areacode<span class=\"token operator\">:</span> <span class=\"token number\">321</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">:</span> <span class=\"token number\">5550010</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// try editing me</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// at most, a type may have one string and one number index signature</span>\n\n<span class=\"token comment\">/**\n * (6) they may be used in combination with other types\n */</span>\n\n<span class=\"token comment\">// augment the existing PhoneNumberDict</span>\n<span class=\"token comment\">// i.e., imported it from a library, adding stuff to it</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">phonenumberdict</span> <span class=\"token punctuation\">{</span>\n  home<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * (7) interfaces are \"open\", meaning any declarations of the\n     * -   same name are merged\n     */</span>\n    areacode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">}</span>\n  office<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    areacode<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n    num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nphonedict<span class=\"token punctuation\">.</span>home <span class=\"token comment\">// definitely present</span>\nphonedict<span class=\"token punctuation\">.</span>office <span class=\"token comment\">// definitely present</span>\nphonedict<span class=\"token punctuation\">.</span>mobile <span class=\"token comment\">// MAYBE present</span></code></pre></div>\n<h3 id=\"6-type-aliases-vs-interfaces\" style=\"position:relative;\"><a href=\"#6-type-aliases-vs-interfaces\" aria-label=\"6 type aliases vs interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6) TYPE ALIASES vs INTERFACES</h3>\n<ul>\n<li>인터페이스는 늦게 초기화 되기 때문에 합성 할 수 있다고 함 자기 자신 참조를 예를 들어 설명했는데 최신버전에 패치 되었는지 타입 알리아스도 잘 동작한다…(잘모르겠다 나중에 공부 후 수정하겠다.)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// == TYPE ALIASES vs INTERFACES == //</span>\n\n<span class=\"token comment\">/**\n * (7) Type aliases are initialized synchronously, but\n * -   can reference themselves\n */</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NumberVal</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token number\">2</span> <span class=\"token operator\">|</span> <span class=\"token number\">3</span> <span class=\"token operator\">|</span> NumberVal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">/**\n * (8) Interfaces are initialized lazily, so combining it\n * -   w/ a type alias allows for recursive types!\n */</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringVal</span> <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'c'</span> <span class=\"token operator\">|</span> StringArr\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">StringArr</span> <span class=\"token operator\">=</span> StringVal<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// interface StringArr {</span>\n<span class=\"token comment\">//   // arr[0]</span>\n<span class=\"token comment\">//   [k: number]: \"a\" | \"b\" | \"c\" | StringVal[];</span>\n<span class=\"token comment\">// }</span>\n\n<span class=\"token keyword\">const</span> x<span class=\"token operator\">:</span> StringVal <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span> <span class=\"token operator\">?</span> <span class=\"token string\">'b'</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// ✅ ok!</span></code></pre></div>\n<h3 id=\"7-type-tests\" style=\"position:relative;\"><a href=\"#7-type-tests\" aria-label=\"7 type tests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7) Type Tests</h3>\n<ul>\n<li>아래가 잘 동작하게끔 만드시오</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> JSONValue<span class=\"token punctuation\">,</span> JSONObject<span class=\"token punctuation\">,</span> JSONArray <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'json-types'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> JSONValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> JSONArray</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token operator\">:</span> JSONObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> hello<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello, world'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">isJSONObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// $ExpectError</span></code></pre></div>\n<ul>\n<li>내가 생각 하는 답</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// 💡 HINT: number[] and Array&lt;number> mean the same thing</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">JSONValue</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> JSONArray <span class=\"token operator\">|</span> JSONObject\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">JSONArray</span> <span class=\"token operator\">=</span> JSONValue<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">JSONObject</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> JSONValue <span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://frontendmasters.com/courses/typescript-v2/\">https://frontendmasters.com/courses/typescript-v2/</a></p>","frontmatter":{"title":"TypeScirpt #2 Interface & Type Aliases","date":"January 25, 2021"}}},"pageContext":{"slug":"/typescript/interface-typealiases/","previous":{"fields":{"slug":"/frontend/eslint-rule-setting/"},"frontmatter":{"title":"나만의 ESLint Rule 만들기 feat Airbnb(팀 Style Guide 배포 후기)","category":"frontend","draft":false}},"next":null}},"staticQueryHashes":["3128451518","52803243"]}