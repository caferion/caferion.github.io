{"componentChunkName":"component---src-templates-blog-post-js","path":"/TypeScript/typescript-basis/","result":{"data":{"site":{"siteMetadata":{"title":"caferion","author":"caferion","siteUrl":"https://caferion.github.io","comment":{"disqusShortName":"","utterances":"caferion/blog-comments"},"sponsor":{"buyMeACoffeeId":"caferion"}}},"markdownRemark":{"id":"7c1055ba-e742-53af-ae8e-cfbb467f1da8","excerpt":"TypeScript 3 Fundamentals, v2 강의를 보고 정리한 내용입니다. 1. 타입스크립트 마이크로소프트에서 개발한 정적 타입 언어 자바스크립트로 컴파일 필요 바벨7가 원할하게 동작 2. 타입스트립트를 왜 쓸까? 일반적인 실수를 잡을 수 있다. (ex 스펠링 에러등) 런타임때 발생할 에러를 컴파일 할때 에러로 알 수 있다. 3. 타입스크립 설정 tsconfig.json 4. 변수 선언…","html":"<p><a href=\"https://frontendmasters.com/courses/typescript-v2/\">TypeScript 3 Fundamentals, v2</a> 강의를 보고 정리한 내용입니다.</p>\n<h2 id=\"1-타입스크립트\" style=\"position:relative;\"><a href=\"#1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"1 타입스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 타입스크립트</h2>\n<ul>\n<li>마이크로소프트에서 개발한 정적 타입 언어</li>\n<li>자바스크립트로 컴파일 필요</li>\n<li>바벨7가 원할하게 동작</li>\n</ul>\n<h2 id=\"2-타입스트립트를-왜-쓸까\" style=\"position:relative;\"><a href=\"#2-%ED%83%80%EC%9E%85%EC%8A%A4%ED%8A%B8%EB%A6%BD%ED%8A%B8%EB%A5%BC-%EC%99%9C-%EC%93%B8%EA%B9%8C\" aria-label=\"2 타입스트립트를 왜 쓸까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 타입스트립트를 왜 쓸까?</h2>\n<ul>\n<li>일반적인 실수를 잡을 수 있다. (ex 스펠링 에러등)</li>\n<li>런타임때 발생할 에러를 컴파일 할때 에러로 알 수 있다.</li>\n</ul>\n<h2 id=\"3-타입스크립-설정\" style=\"position:relative;\"><a href=\"#3-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD-%EC%84%A4%EC%A0%95\" aria-label=\"3 타입스크립 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 타입스크립 설정</h2>\n<p>tsconfig.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"cocmpilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Transform JSX</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Enable \"strict\" features</span>\n    <span class=\"token property\">\"noImplicitAny\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Forbid implicit any</span>\n    <span class=\"token property\">\"strictNullChecks\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Check + compile JS</span>\n    <span class=\"token property\">\"alllowJs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"experimentalDecorators\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"emitDecoratorMetadata\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"tartget\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span> <span class=\"token comment\">// Target environment</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"4-변수-선언\" style=\"position:relative;\"><a href=\"#4-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"4 변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 변수 선언</h2>\n<h3 id=\"1-변수\" style=\"position:relative;\"><a href=\"#1-%EB%B3%80%EC%88%98\" aria-label=\"1 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) 변수</h3>\n<ul>\n<li>초기 값을 입력하면 해당 타입으로 설정된다. 다른 타입 재할당시 에러 발생</li>\n<li>어떤 값도 초기화 하지 않으면 any로 할당되어, 재할당시 타입 재약이 없지만 타입을 약화 시키기에 좋지 않다.</li>\n<li>선언시 <code class=\"language-text\">:타입</code>(Type Annotation) 해줄 경우 값을 초기화 하지 않아도 해당 변수는 선언된 타입만 가질 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * (1) x is a string, b/c we’ve initialized it\n */</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span>\n\n<span class=\"token comment\">/**\n * (2) reassignment is fine\n */</span>\nx <span class=\"token operator\">=</span> <span class=\"token string\">'hello mars'</span>\n\n<span class=\"token comment\">/**\n * (3) but if we try to change type\n */</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">42</span> <span class=\"token comment\">// 🚨 ERROR</span>\n\n<span class=\"token comment\">/**\n * (5) sometimes we need to declare a variable w/o initializing it\n */</span>\n<span class=\"token keyword\">let</span> z\nz <span class=\"token operator\">=</span> <span class=\"token number\">41</span>\nz <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span> <span class=\"token comment\">// (6) oh no! This isn't good</span>\n\n<span class=\"token comment\">/**\n * (7) we could improve this situation by providing a type annotation\n * when we declare our variable\n */</span>\n<span class=\"token keyword\">let</span> zz<span class=\"token operator\">:</span> number\nzz <span class=\"token operator\">=</span> <span class=\"token number\">41</span>\nzz <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span> <span class=\"token comment\">// 🚨 ERROR Type '\"abc\"' is not assignable to type 'number'.</span></code></pre></div>\n<h3 id=\"2-array\" style=\"position:relative;\"><a href=\"#2-array\" aria-label=\"2 array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2) Array</h3>\n<ul>\n<li><code class=\"language-text\">:타입[]</code> 으로 타입을 선언 할 수 있다.</li>\n<li>타입 데코레이션이 없을시 never 타입으로 선언되면, 어떤 타입의 값이 들어가도 에러가 발생한다.</li>\n<li>한 개이상 배열 요소의 값을 가지고 초기화시 해당 타입들을 가질 수 있는 배열이 된다.</li>\n<li>:[number, string, string, number] 선언시 고정위치의 타입을 선언 할 수 있다. 배열 할당시에만 적용되고, push로 값을 추가시 number | string 만 체크하게 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * (8) simple array types can be expressed using []\n */</span>\n<span class=\"token keyword\">let</span> aa<span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\naa<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span>\naa<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🚨 ERROR: Argument of type '\"abc\"' is not assignable to parameter of type 'number'.</span>\n\n<span class=\"token keyword\">let</span> aa <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\naa<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🚨 ERROR: Argument of type 33 is not assignable to parameter of type 'never'.</span>\naa<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🚨 ERROR: Argument of type '\"abc\"' is not assignable to parameter of type 'never'.</span>\n\n<span class=\"token keyword\">let</span> aa <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\naa<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span>\naa<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 🚨 ERROR: Argument of type '\"abc\"' is not assignable to parameter of type 'number'.</span>\n\n<span class=\"token comment\">/**\n * (9) we can even define a tuple, which has a fixed length\n */</span>\n<span class=\"token keyword\">let</span> bb<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Fake Street'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'Nowhere, USA'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token number\">10110</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\nbb<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\nbb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 🚨 ERROR: Type 'number' is not assignable to type 'string'.</span>\nbb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\nbb <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 🚨 ERROR: '[number]' 형식은 '[number, string, string, number]' 형식에 할당할 수 없습니다. 소스에 1개 요소가 있지만, 대상에 4개가 필요합니다.</span>\n\n<span class=\"token comment\">/**\n * (10) Tuple values often require type annotations (  : [number, number] )\n */</span>\n<span class=\"token keyword\">const</span> xx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// number[];</span>\n<span class=\"token keyword\">const</span> yy<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>number<span class=\"token punctuation\">,</span> number<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3 id=\"3-object-types--interfaces\" style=\"position:relative;\"><a href=\"#3-object-types--interfaces\" aria-label=\"3 object types  interfaces permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3) Object Types &#x26; Interfaces</h3>\n<ul>\n<li><code class=\"language-text\">:{property1:타입; property2: 타입}</code> 세미콜론으로 프로퍼티를 구분하고, 재할당시 타입을 선언한 프로퍼티들이 존재해야한다.</li>\n<li><code class=\"language-text\">?</code> 연산자를 사용할 경우 해당 프로퍼티는 존재하지 않아도 상관없다. 타입이 선언되지 않은 프로퍼티는 에러를 발생한다.</li>\n<li><code class=\"language-text\">interface name {property1:타입; property2: 타입}</code> 인터페이스로 객체를 타입을 위와 똑같은 동작을 하는 타입선언 할 수 있으며, 인터페이스로 선언 할 경우 재사용이 가능한 장점이 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * (11) object types can be expressed using {} and property names\n */</span>\n<span class=\"token keyword\">let</span> cc<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> houseNumber<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> streetName<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span>\ncc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  streetName<span class=\"token operator\">:</span> <span class=\"token string\">'Fake Street'</span><span class=\"token punctuation\">,</span>\n  houseNumber<span class=\"token operator\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\ncc <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  houseNumber<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/**\n * 🚨 Property 'streetName'\n * 🚨   is missing in type   '{ houseNumber: number; }'\n * 🚨   but required in type '{ houseNumber: number; streetName: string; }'.\n */</span>\n\n<span class=\"token comment\">/**\n * (12) You can use the optional operator (?) to\n * indicate that something may or may not be there\n */</span>\n<span class=\"token keyword\">let</span> dd<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> houseNumber<span class=\"token operator\">:</span> number<span class=\"token punctuation\">,</span> streetName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span>\ndd <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  houseNumber<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// (13) if we want to re-use this type, we can create an interface</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Address</span> <span class=\"token punctuation\">{</span>\n  houseNumber<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  streetName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// and refer to it by name</span>\n<span class=\"token keyword\">let</span> ee<span class=\"token operator\">:</span> Address <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> houseNumber<span class=\"token operator\">:</span> <span class=\"token number\">33</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"4-intersection--union-types\" style=\"position:relative;\"><a href=\"#4-intersection--union-types\" aria-label=\"4 intersection  union types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4) Intersection &#x26; Union Types</h3>\n<ul>\n<li><code class=\"language-text\">: interface1 | interface2</code> 로 타입을 선언 할 경우 두 interface의 공통 property에만 접근 할 수 있다.</li>\n<li><code class=\"language-text\">: interface1 &amp; interface</code> 로 타입을 선언 할 경우 두 interface의 a모든 property가 있어야 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * (14) Intersection  types\n * Sometimes we have a type that can be one of several things\n */</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasPhoneNumber</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  phone<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasEmail</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> contactInfo<span class=\"token operator\">:</span> HasEmail <span class=\"token operator\">|</span> HasPhoneNumber <span class=\"token operator\">=</span>\n  Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.5</span>\n    <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// we can assign it to a HasPhoneNumber</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span>\n        phone<span class=\"token operator\">:</span> <span class=\"token number\">3215551212</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// or a HasEmail</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span>\n        email<span class=\"token operator\">:</span> <span class=\"token string\">\"mike@example.com\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\ncontactInfo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOTE: we can only access the .name property  (the stuff HasPhoneNumber and HasEmail have in common)</span>\n\n<span class=\"token comment\">/**\n * (15) Union types\n */</span>\n<span class=\"token keyword\">let</span> otherContactInfo<span class=\"token operator\">:</span> HasEmail <span class=\"token operator\">&amp;</span> HasPhoneNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// we _must_ initialize it to a shape that's asssignable to HasEmail _and_ HasPhoneNumber</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Mike\"</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">\"mike@example.com\"</span><span class=\"token punctuation\">,</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token number\">3215551212</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\notherContactInfo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOTE: we can access anything on _either_ type</span>\notherContactInfo<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\notherContactInfo<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> zzz<span class=\"token operator\">:</span> any <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> never<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"5-functions\" style=\"position:relative;\"><a href=\"#5-functions\" aria-label=\"5 functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5) Functions</h3>\n<ul>\n<li>함수의 파라미터와 리턴 타입을 선언 할 수 있다.</li>\n<li>rest 파라미터는 배열형태로 타입을 선언 해주면 된다.</li>\n<li>Overload Signatures를 이용해 Overload를 구현 할 수 있다. 다른언어와 다르게 실행함수는 공통으로 만든 후 if문으로 분기해야한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasPhoneNumber</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  phone<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HasEmail</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// (1) function arguments and return values can have type annotations</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token operator\">:</span> HasEmail</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> recipient<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> body<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    recipient<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>to<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>to<span class=\"token punctuation\">.</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Mike &lt;mike@example.com></span>\n    body<span class=\"token operator\">:</span> <span class=\"token string\">\"You're pre-qualified for a loan!\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// (2) or the arrow-function variant</span>\n<span class=\"token keyword\">const</span> sendTextMessage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  to<span class=\"token operator\">:</span> HasPhoneNumber\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> recipient<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span> body<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    recipient<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>to<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> &lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>to<span class=\"token punctuation\">.</span>phone<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token string\">\"You're pre-qualified for a loan!\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// (3) return types can almost always be inferred</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getNameParts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">contact<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> parts <span class=\"token operator\">=</span> contact<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\s</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// split @ whitespace</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Can't calculate name parts from name \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>contact<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    first<span class=\"token operator\">:</span> parts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    middle<span class=\"token operator\">:</span>\n      parts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span>\n        <span class=\"token operator\">?</span> <span class=\"token keyword\">undefined</span>\n        <span class=\"token operator\">:</span> <span class=\"token comment\">// everything except first and last</span>\n          parts<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> parts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    last<span class=\"token operator\">:</span> parts<span class=\"token punctuation\">[</span>parts<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// (4) rest params work just as you'd think. Type must be array-ish</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>vals<span class=\"token operator\">:</span> number<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> vals<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sum<span class=\"token punctuation\">,</span> x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> sum <span class=\"token operator\">+</span> x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13</span>\n\n<span class=\"token comment\">// (5) we can even provide multiple function signatures</span>\n<span class=\"token comment\">// \"overload signatures\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">contactPeople</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">:</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>people<span class=\"token operator\">:</span> HasEmail<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">contactPeople</span><span class=\"token punctuation\">(</span>method<span class=\"token operator\">:</span> <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>people<span class=\"token operator\">:</span> HasPhoneNumber<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// \"function implementation\"</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">contactPeople</span><span class=\"token punctuation\">(</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">\"email\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>people<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>HasEmail <span class=\"token operator\">|</span> HasPhoneNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">===</span> <span class=\"token string\">\"email\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>people <span class=\"token keyword\">as</span> HasEmail<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sendEmail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>people <span class=\"token keyword\">as</span> HasPhoneNumber<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>sendTextMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ✅ email works</span>\n<span class=\"token function\">contactPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ✅ phone works</span>\n<span class=\"token function\">contactPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span> <span class=\"token number\">12345678</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 🚨 mixing does not work</span>\n<span class=\"token function\">contactPeople</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span> <span class=\"token number\">12345678</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"6-lexical-scope\" style=\"position:relative;\"><a href=\"#6-lexical-scope\" aria-label=\"6 lexical scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6) Lexical Scope</h3>\n<ul>\n<li><code class=\"language-text\">this</code> 를 파라미터로 타입을 선언 해주게 되면 scope 타입을 선언 해줄 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// (6) the lexical scope (this) of a function is part of its signature</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">this</span><span class=\"token operator\">:</span> HasEmail <span class=\"token operator\">&amp;</span> HasPhoneNumber<span class=\"token punctuation\">,</span>\n  preferredMethod<span class=\"token operator\">:</span> <span class=\"token string\">'phone'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'email'</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>preferredMethod <span class=\"token operator\">===</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sendEmail'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">sendEmail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sendTextMessage'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">sendTextMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span> <span class=\"token number\">3215551212</span><span class=\"token punctuation\">,</span> email<span class=\"token operator\">:</span> <span class=\"token string\">'mike@example.com'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">invokeSoon</span><span class=\"token punctuation\">(</span><span class=\"token function-variable function\">cb</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> any<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">cb</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 🚨 this is not satisfied</span>\n<span class=\"token function\">invokeSoon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✅ creating a bound function is one solution</span>\n<span class=\"token keyword\">const</span> bound <span class=\"token operator\">=</span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">invokeSoon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">bound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ✅ call/apply works as well</span>\n<span class=\"token function\">invokeSoon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">sendMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://frontendmasters.com/courses/typescript-v2/\">https://frontendmasters.com/courses/typescript-v2/</a></p>","frontmatter":{"title":"TypeScirpt #1 타입스크립트 기초","date":"December 30, 2020"}}},"pageContext":{"slug":"/TypeScript/typescript-basis/","previous":{"fields":{"slug":"/JavaScript/variable/"},"frontmatter":{"title":"let, const 그리고 var (자바스크립트 변수 선언)","category":"javascript","draft":false}},"next":{"fields":{"slug":"/frontend/eslint-rule-setting/"},"frontmatter":{"title":"나만의 ESLint Rule 만들기 feat Airbnb(팀 Style Guide 배포 후기)","category":"frontend","draft":false}}}},"staticQueryHashes":["3128451518","52803243"]}